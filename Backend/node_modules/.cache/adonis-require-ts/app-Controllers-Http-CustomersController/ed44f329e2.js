"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomerDetail_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/CustomerDetail"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class CustomersController {
    async insertcustomer({ request }) {
        const table1 = new CustomerDetail_1.default();
        table1.cusid = request.input('id');
        table1.name = request.input('name');
        table1.owner = request.input('owner');
        await table1.save();
        return await CustomerDetail_1.default.all();
    }
    async readcustomer() {
        const data = await CustomerDetail_1.default.all();
        data.sort((a, b) => a["id"] - b["id"]);
        return data;
    }
    async updatecustomer({ request }) {
        try {
            const user = await CustomerDetail_1.default.findByOrFail('id', request.params().id);
            user.cusid = request.input('id');
            user.name = request.input('name');
            user.owner = request.input('owner');
            await user.save();
            await user.save();
            return await CustomerDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async deletecustomer({ request }) {
        try {
            const user = await CustomerDetail_1.default.findByOrFail('id', request.params().id);
            user.delete();
            await user.save();
            return await CustomerDetail_1.default.all();
        }
        catch {
            return "sorry wrong details";
        }
    }
    async iddesc() {
        const data = await CustomerDetail_1.default.all();
        return data;
    }
    async nameasc() {
        return CustomerDetail_1.default.query().orderBy("name", "asc");
    }
    async namedsc() {
        return CustomerDetail_1.default.query().orderBy("name", "desc");
    }
    async ownerasc() {
        return CustomerDetail_1.default.query().orderBy("owner", "asc");
    }
    async ownerdsc() {
        return CustomerDetail_1.default.query().orderBy("owner", "desc");
    }
    async searchcustomer({ request }) {
        const data = request.input('Key');
        return Database_1.default
            .from('customer_details')
            .select('*')
            .where((query) => {
            if (/^[0-9]/.test(data)) {
                query
                    .where('id', data)
                    .orWhere('cusid', data)
                    .orWhereILike('name', '%' + data + '%')
                    .orWhereILike('owner', '%' + data + '%');
            }
        })
            .orWhere((query) => {
            query
                .whereILike('name', '%' + data + '%')
                .orWhereILike('owner', '%' + data + '%');
        });
    }
}
exports.default = CustomersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tZXJzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkN1c3RvbWVyc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxxR0FBc0Q7QUFDdEQsMkZBQWlEO0FBQ2pELE1BQXFCLG1CQUFtQjtJQUU3QixLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUMsT0FBTyxFQUFxQjtRQUUxRCxNQUFNLE1BQU0sR0FBQyxJQUFJLHdCQUFjLEVBQUUsQ0FBQTtRQUNqQyxNQUFNLENBQUMsS0FBSyxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEMsTUFBTSxDQUFDLElBQUksR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLE1BQU0sQ0FBQyxLQUFLLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNuQixPQUFPLE1BQU0sd0JBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBQ00sS0FBSyxDQUFDLFlBQVk7UUFHckIsTUFBTSxJQUFJLEdBQUMsTUFBTSx3QkFBYyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDdEMsT0FBTyxJQUFJLENBQUE7SUFFZixDQUFDO0lBQ00sS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFDLE9BQU8sRUFBQztRQUVqQyxJQUFHO1lBQ0wsTUFBTSxJQUFJLEdBQUMsTUFBTSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ3RFLElBQUksQ0FBQyxLQUFLLEdBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUM5QixJQUFJLENBQUMsSUFBSSxHQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ2pDLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ25CLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ2pCLE9BQU8sTUFBTSx3QkFBYyxDQUFDLEdBQUcsRUFBRSxDQUFBO1NBQzVCO1FBQ0QsTUFBSztZQUVILE9BQU8scUJBQXFCLENBQUE7U0FDN0I7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFDLE9BQU8sRUFBQztRQUVuQyxJQUFHO1lBRUQsTUFBTSxJQUFJLEdBQUcsTUFBTSx3QkFBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1lBQ2hGLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtZQUNiLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQ2pCLE9BQU8sTUFBTSx3QkFBYyxDQUFDLEdBQUcsRUFBRSxDQUFBO1NBQzFCO1FBQ0QsTUFBSztZQUNILE9BQU8scUJBQXFCLENBQUE7U0FDN0I7SUFDSCxDQUFDO0lBQ00sS0FBSyxDQUFDLE1BQU07UUFFakIsTUFBTSxJQUFJLEdBQUMsTUFBTSx3QkFBYyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ3JDLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUNNLEtBQUssQ0FBQyxPQUFPO1FBRXhCLE9BQU8sd0JBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEtBQUssQ0FBQyxDQUFBO0lBQy9DLENBQUM7SUFDTSxLQUFLLENBQUMsT0FBTztRQUVsQixPQUFPLHdCQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxNQUFNLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBQ00sS0FBSyxDQUFDLFFBQVE7UUFFekIsT0FBTyx3QkFBYyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUNNLEtBQUssQ0FBQyxRQUFRO1FBRW5CLE9BQU8sd0JBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFTSxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUMsT0FBTyxFQUFDO1FBRXpDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDckIsT0FBTyxrQkFBUTthQUNkLElBQUksQ0FBQyxrQkFBa0IsQ0FBQzthQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDYixJQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUM7Z0JBQ25CLEtBQUs7cUJBQ0osS0FBSyxDQUFDLElBQUksRUFBQyxJQUFJLENBQUM7cUJBQ2hCLE9BQU8sQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDO3FCQUNyQixZQUFZLENBQUMsTUFBTSxFQUFDLEdBQUcsR0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDO3FCQUNqQyxZQUFZLENBQUMsT0FBTyxFQUFDLEdBQUcsR0FBQyxJQUFJLEdBQUMsR0FBRyxDQUFDLENBQUE7YUFDdEM7UUFDTCxDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNmLEtBQUs7aUJBQ0osVUFBVSxDQUFDLE1BQU0sRUFBQyxHQUFHLEdBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQztpQkFDL0IsWUFBWSxDQUFDLE9BQU8sRUFBQyxHQUFHLEdBQUMsSUFBSSxHQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUVWO0FBNUZELHNDQTRGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgQ3VzdG9tZXJEZXRhaWwgZnJvbSAnQXBwL01vZGVscy9DdXN0b21lckRldGFpbCdcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSdcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1c3RvbWVyc0NvbnRyb2xsZXIge1xuXG4gICAgcHVibGljIGFzeW5jIGluc2VydGN1c3RvbWVyKHtyZXF1ZXN0fTpIdHRwQ29udGV4dENvbnRyYWN0KVxuICAgIHtcbiAgIGNvbnN0IHRhYmxlMT1uZXcgQ3VzdG9tZXJEZXRhaWwoKVxuICAgdGFibGUxLmN1c2lkPXJlcXVlc3QuaW5wdXQoJ2lkJylcbiAgIHRhYmxlMS5uYW1lPXJlcXVlc3QuaW5wdXQoJ25hbWUnKVxuICAgdGFibGUxLm93bmVyPXJlcXVlc3QuaW5wdXQoJ293bmVyJylcbiAgIGF3YWl0IHRhYmxlMS5zYXZlKClcbiAgIHJldHVybiBhd2FpdCBDdXN0b21lckRldGFpbC5hbGwoKVxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgcmVhZGN1c3RvbWVyKClcbiAgICB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkYXRhPWF3YWl0IEN1c3RvbWVyRGV0YWlsLmFsbCgpXG4gICAgICAgIGRhdGEuc29ydCgoYSwgYikgPT4gYVtcImlkXCJdIC0gYltcImlkXCJdKVxuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgIFxuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlY3VzdG9tZXIoe3JlcXVlc3R9KVxuICAgIHtcbiAgICAgICAgdHJ5e1xuICAgICAgY29uc3QgdXNlcj1hd2FpdCBDdXN0b21lckRldGFpbC5maW5kQnlPckZhaWwoJ2lkJyxyZXF1ZXN0LnBhcmFtcygpLmlkKVxuICAgICAgdXNlci5jdXNpZD1yZXF1ZXN0LmlucHV0KCdpZCcpXG4gICAgICB1c2VyLm5hbWU9cmVxdWVzdC5pbnB1dCgnbmFtZScpXG4gICAgICB1c2VyLm93bmVyPXJlcXVlc3QuaW5wdXQoJ293bmVyJylcbiAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXG4gICAgYXdhaXQgdXNlci5zYXZlKClcbiAgICByZXR1cm4gYXdhaXQgQ3VzdG9tZXJEZXRhaWwuYWxsKClcbiAgICAgICAgfVxuICAgICAgICBjYXRjaHtcblxuICAgICAgICAgIHJldHVybiBcInNvcnJ5IHdyb25nIGRldGFpbHNcIlxuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBkZWxldGVjdXN0b21lcih7cmVxdWVzdH0pXG4gICAge1xuICAgICAgdHJ5eyBcbiAgICAgIFxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgQ3VzdG9tZXJEZXRhaWwuZmluZEJ5T3JGYWlsKCdpZCcscmVxdWVzdC5wYXJhbXMoKS5pZClcbnVzZXIuZGVsZXRlKClcbmF3YWl0IHVzZXIuc2F2ZSgpXG5yZXR1cm4gYXdhaXQgQ3VzdG9tZXJEZXRhaWwuYWxsKClcbiAgICAgIH1cbiAgICAgIGNhdGNoe1xuICAgICAgICByZXR1cm4gXCJzb3JyeSB3cm9uZyBkZXRhaWxzXCJcbiAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGlkZGVzYygpXG4gICAge1xuICAgICAgY29uc3QgZGF0YT1hd2FpdCBDdXN0b21lckRldGFpbC5hbGwoKVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG5hbWVhc2MoKVxuICAgIHtcbnJldHVybiBDdXN0b21lckRldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJuYW1lXCIsXCJhc2NcIilcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG5hbWVkc2MoKVxuICAgIHtcbiAgICAgIHJldHVybiBDdXN0b21lckRldGFpbC5xdWVyeSgpLm9yZGVyQnkoXCJuYW1lXCIsXCJkZXNjXCIpXG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBvd25lcmFzYygpXG4gICAge1xucmV0dXJuIEN1c3RvbWVyRGV0YWlsLnF1ZXJ5KCkub3JkZXJCeShcIm93bmVyXCIsXCJhc2NcIilcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG93bmVyZHNjKClcbiAgICB7XG4gICAgICByZXR1cm4gQ3VzdG9tZXJEZXRhaWwucXVlcnkoKS5vcmRlckJ5KFwib3duZXJcIixcImRlc2NcIilcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGFzeW5jIHNlYXJjaGN1c3RvbWVyKHtyZXF1ZXN0fSlcbntcbmNvbnN0IGRhdGEgPSByZXF1ZXN0LmlucHV0KCdLZXknKVxuICAgICAgICAgICAgcmV0dXJuIERhdGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgnY3VzdG9tZXJfZGV0YWlscycpXG4gICAgICAgICAgICAuc2VsZWN0KCcqJylcbiAgICAgICAgICAgIC53aGVyZSgocXVlcnkpID0+e1xuICAgICAgICAgICAgICAgIGlmKC9eWzAtOV0vLnRlc3QoZGF0YSkpe1xuICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICAud2hlcmUoJ2lkJyxkYXRhKVxuICAgICAgICAgICAgICAgICAgICAub3JXaGVyZSgnY3VzaWQnLGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5vcldoZXJlSUxpa2UoJ25hbWUnLCclJytkYXRhKyclJylcbiAgICAgICAgICAgICAgICAgICAgLm9yV2hlcmVJTGlrZSgnb3duZXInLCclJytkYXRhKyclJylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9yV2hlcmUoKHF1ZXJ5KSA9PntcbiAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgIC53aGVyZUlMaWtlKCduYW1lJywnJScrZGF0YSsnJScpXG4gICAgICAgICAgICAgICAgLm9yV2hlcmVJTGlrZSgnb3duZXInLCclJytkYXRhKyclJylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuXG59XG4iXX0=